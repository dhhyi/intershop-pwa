name: DemoServerUp

on: [pull_request]

env:
  ICM_BASE_URL: http://pwa-review.northeurope.cloudapp.azure.com:8081
  GROUP: 'pwa-gh-review-${{ github.event.pull_request.number }}'

jobs:
  CancelPrevious:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Old Pipeline
        uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  PrintEnv:
    runs-on: ubuntu-latest
    steps:
      - name: Print env
        run: |
          set +x
          env
          echo "##### ${{ github.event.pull_request.number }}"
          echo $GROUP
          cat $GITHUB_EVENT_PATH

  BuildNDeployDemoServer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Publish Universal Image to Registry
        id: universal
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          serviceWorker: false
          configuration: production
          displayVersion: '${{ env.GITHUB_REF }}@${{ env.GITHUB_SHA }}'
        with:
          name: universal
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}
          buildargs: serviceWorker,configuration,displayVersion
          snapshot: true

      # - name: Publish Nginx Image to Registry
      #   id: nginx
      #   uses: elgohr/Publish-Docker-Github-Action@master
      #   with:
      #     name: nginx
      #     username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
      #     password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      #     registry: ${{ secrets.DOCKER_REGISTRY }}
      #     workdir: nginx
      #     snapshot: true

      - name: Set Environment
        uses: allenevans/set-env@v1.0.0
        with:
          overwrite: true
          DOCKER_IMAGE_UNIVERSAL: ${{ steps.universal.outputs.digest }}
          # DOCKER_IMAGE_NGINX: ${{ steps.nginx.outputs.digest }}

      - name: Login to Azure
        run: |
          az login -u ${{ secrets.AZURE_USERNAME }} -p=${{ secrets.AZURE_PASSWORD }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: Create Resource Group
        run: test "$(az group exists --name $GROUP)" = "true" || az group create --name $GROUP --location "North Europe"

      - name: Create App Service Plan
        run: test ! -z "$(az appservice plan show --name $GROUP-plans --resource-group $GROUP)" || az appservice plan create --name $GROUP-plan --resource-group $GROUP --sku F1 --is-linux

      - name: Create or Update B2C App Service
        run: |
          az webapp config container set --resource-group $GROUP --name $GROUP-universal-b2c --docker-registry-server-user ${{ secrets.DOCKER_REGISTRY_USERNAME }} --docker-registry-server-password ${{ secrets.DOCKER_REGISTRY_PASSWORD }} --docker-custom-image-name $DOCKER_IMAGE_UNIVERSAL || az webapp create --resource-group $GROUP --plan $GROUP-plan --name $GROUP-universal-b2c --docker-registry-server-user ${{ secrets.DOCKER_REGISTRY_USERNAME }} --docker-registry-server-password ${{ secrets.DOCKER_REGISTRY_PASSWORD }} --deployment-container-image-name $DOCKER_IMAGE_UNIVERSAL
          az webapp config appsettings set -g $GROUP -n $GROUP-universal-b2c --settings LOGGING=true ICM_BASE_URL=$ICM_BASE_URL
          az webapp deployment container config -g $GROUP -n $GROUP-universal-b2c --enable-cd true
          echo "B2C channel: http://$GROUP-universal-b2c.azurewebsites.net"

      - name: Create or Update B2B App Service
        run: |
          az webapp config container set --resource-group $GROUP --name $GROUP-universal-b2b --docker-registry-server-user ${{ secrets.DOCKER_REGISTRY_USERNAME }} --docker-registry-server-password ${{ secrets.DOCKER_REGISTRY_PASSWORD }} --docker-custom-image-name $DOCKER_IMAGE_UNIVERSAL || az webapp create --resource-group $GROUP --plan $GROUP-plan --name $GROUP-universal-b2b --docker-registry-server-user ${{ secrets.DOCKER_REGISTRY_USERNAME }} --docker-registry-server-password ${{ secrets.DOCKER_REGISTRY_PASSWORD }} --deployment-container-image-name $DOCKER_IMAGE_UNIVERSAL
          az webapp config appsettings set -g $GROUP -n $GROUP-universal-b2b --settings LOGGING=true ICM_BASE_URL=$ICM_BASE_URL ICM_CHANNEL=inSPIRED-inTRONICS_Business-Site THEME=blue\|688dc3 FEATURES=compare,recently,tracking,sentry,advancedVariationHandling,businessCustomerRegistration,quoting,quickorder,orderTemplates
          az webapp deployment container config -g $GROUP -n $GROUP-universal-b2b --enable-cd true
          echo "B2B channel: http://$GROUP-universal-b2b.azurewebsites.net"

      - name: Create Commit Comment
        uses: peter-evans/commit-comment@v1
        with:
          body: |
            Azure Demo Servers are available:
            - [Universal B2C](http://${{ env.GROUP }}-universal-b2c.azurewebsites.net)
            - [Universal B2B](http://${{ env.GROUP }}-universal-b2b.azurewebsites.net)

# az webapp config container set --resource-group $GROUP --name $GROUP-nginx --docker-registry-server-user ${{ secrets.DOCKER_REGISTRY_USERNAME }} --docker-registry-server-password ${{ secrets.DOCKER_REGISTRY_PASSWORD }} --docker-custom-image-name $DOCKER_IMAGE_NGINX || az webapp create --resource-group $GROUP --plan $GROUP-plan --name $GROUP-nginx --docker-registry-server-user ${{ secrets.DOCKER_REGISTRY_USERNAME }} --docker-registry-server-password ${{ secrets.DOCKER_REGISTRY_PASSWORD }} --deployment-container-image-name $DOCKER_IMAGE_NGINX
# az webapp config appsettings set -g $GROUP -n $GROUP-nginx --settings DEBUG=true UPSTREAM_PWA=http://$GROUP-universal.azurewebsites.net PWA_1_SUBDOMAIN=$GROUP-nginx PWA_1_CHANNEL=inSPIRED-inTRONICS_Business-Site PWA_1_THEME=blue\|688dc3 PWA_1_FEATURES=compare,recently,tracking,sentry,advancedVariationHandling,businessCustomerRegistration,quoting,quickorder,orderTemplates
# az webapp deployment container config -g $GROUP -n $GROUP-nginx --enable-cd true

# az webapp create --resource-group $GROUP --plan $GROUP-plan --name $GROUP-app --multicontainer-config-type compose --multicontainer-config-file docker-compose.yml --subscription ${{ secrets.AZURE_SUBSCRIPTION }} --docker-registry-server-user ${{ secrets.DOCKER_REGISTRY_USERNAME }} --docker-registry-server-password ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
# az group delete --name $GROUP --subscription ${{ secrets.AZURE_SUBSCRIPTION }} -y
# az webapp delete --resource-group $GROUP --name $GROUP-app --subscription ${{ secrets.AZURE_SUBSCRIPTION }}
